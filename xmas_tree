class XmasTree:

    def __init__(self, levels):
        self.x_tree = self.xmas_tree(levels)
        self.max_len = len(self.x_tree[-1]) + 2
        self.x_tree_full = []

    @staticmethod
    def xmas_tree(num):
        tree = []
        max_len = (num * 2) - 1
        nums = [i for i in range(1, max_len, 2)]
        c = 1
        for num in nums:
            lvl = []
            for i in range(num):
                if i % 2 == 1:
                    lvl.append(c)
                    c += 1
                else:
                    lvl.append("*")
            tree.append(lvl)
        return tree

    def xmas_tree_printer(self):
        for level in self.x_tree_full:
            print("".join(level))

    def xmas_tree_full(self):
        star = ["X",]
        top = ["^",]
        stump = ["|", " ", "|",]
        for level in self.x_tree:
            level.append("\\")
            level.insert(0, "/")
        self.x_tree.insert(0, top)
        self.x_tree.insert(0, star)
        self.x_tree.append(stump)

        for level in self.x_tree:
            lvl_len = len(level)
            space_num = (self.max_len - lvl_len) // 2
            space_lst = [" " for _ in range(space_num)]
            self.x_tree_full.append(space_lst + level + space_lst)


    def decor(self, interval):
        for level in self.x_tree:
            for i in range(len(level)):
                if isinstance(level[i], int):  # Only modify integers
                    if interval == 1 or level[i] % interval == 1:
                        level[i] = "O"  # Replace with ornament
                    else:
                        level[i] = "*"  # Replace with default decoration


class Postcard:
    def __init__(self):
        self.height = 30
        self.width = 50
        self.table = [[" " for _ in range(self.width - 2)] for _ in range(self.height - 4)]

    def add_tree(self, tree, start_row, start_col):
        """Add a tree to the postcard at a specific location."""
        for r, level in enumerate(tree):
            row_idx = start_row + r
            if row_idx >= self.height:  # Skip if tree goes beyond the postcard height
                continue
            for c, char in enumerate(level):
                col_idx = start_col + c
                if 0 <= col_idx < self.width:  # Skip if out of postcard bounds
                    # Overlap existing characters if necessary
                    if self.table[row_idx][col_idx] == " " or char not in [" ", "|", "/"]:
                        self.table[row_idx][col_idx] = char

    def __str__(self):
        height_border = "-" * self.width
        empty_string = "|" + " " * (self.width - 2) + "|"
        result = [height_border]
        for line in self.table:
            result.append("|" + "".join(line) + "|")
        result.append("|" + "Merry Xmas".center(self.width - 2, " ") + "|")
        result.append(empty_string)
        result.append(height_border)
        return "\n".join(result)


if __name__ == '__main__':
    input_lst = [int(i) for i in input().split()]
    if len(input_lst) == 2:
        tree_height, inter_val = input_lst
        x_tree = XmasTree(tree_height)
        # print(x_tree.x_tree)
        x_tree.decor(inter_val)
        # print(x_tree.x_tree)
        x_tree.xmas_tree_full()
        x_tree.xmas_tree_printer()
    elif len(input_lst) % 4 == 0:
        postcard = Postcard()
        for i in range(0, len(input_lst), 4):
            height, interval, start_row, start_col = input_lst[i:i + 4]
            start_row = start_row - 1
            x_tree = XmasTree(height)
            x_tree.decor(interval)
            x_tree.xmas_tree_full()
            start_col = start_col - (len(x_tree.x_tree_full[0]) // 2) - 1
            postcard.add_tree(x_tree.x_tree_full, start_row, start_col)
        print(postcard)







